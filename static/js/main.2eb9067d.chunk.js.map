{"version":3,"sources":["PrayerTimes.js","App.js","serviceWorker.js","index.js"],"names":["PrayerTimes","props","display","prayers","cityname","react_default","a","createElement","country","date","className","width","fajr","dhuhr","asr","maghrib","isha","shurooq","App","state","changeHandler","e","data","Object","objectSpread","_this","target","name","value","setState","submitHandler","axios","get","concat","then","response","console","log","items","city","date_for","qibla","qibla_direction","latitude","longitude","this","onChange","onClick","src_PrayerTimes","src","style","transform","Number","height","frameborder","allow","allowfullscreen","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2eb9067d.chunk.js","sourcesContent":["import React from 'react'\n\nconst PrayerTimes = (props) => {\n  let display;\n  if (props.prayers.cityname) {\n    display = <div><p> <b>The prayer times in</b> {props.prayers.cityname}, {props.prayers.country}  </p><p><b>Today's Date:</b> {props.prayers.date} </p> </div>\n  }\n  return (\n    <div className=\"prayerTimes\">\n      {display}\n\n      <table width=\"40%\">\n        <tr>\n          <th>Prayer </th>\n          <th>Time</th>\n        </tr>\n\n        <tr>\n          <td>Fajr Prayer </td>\n          <td>{props.prayers.fajr} </td>\n        </tr>\n\n        <tr>\n          <td width=\"70%\">Dhuhr Prayer</td>\n          <td width=\"30%\"> {props.prayers.dhuhr}  </td>\n        </tr>\n\n        <tr>\n          <td>Asr Prayer </td>\n          <td> {props.prayers.asr}  </td>\n        </tr>\n\n        <tr>\n          <td>Maghrib Prayer</td>\n          <td> {props.prayers.maghrib}</td>\n        </tr>\n\n        <tr>\n          <td>Isha Prayer </td>\n          <td> {props.prayers.isha} </td>\n        </tr>\n\n        <tr>\n          <td>Sunrise Time (Shurooq) </td>\n          <td> {props.prayers.shurooq}</td>\n        </tr>\n\n      </table>\n\n    </div>\n  )\n}\n\nexport default PrayerTimes\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport PrayerTimes from './PrayerTimes';\nimport Compass from './Compass';\n// import prayerTimes from './prayerTimes'\n\n\nclass App extends Component {\n\n  state = {\n    cityname: ''\n  }\n\n  changeHandler = (e) => {\n    let data = { ...this.state } //clones the state\n\n    data[e.target.name] = e.target.value\n\n    this.setState(data)\n  }\n\n  submitHandler = () => {\n    axios.get(`https://cors-anywhere.herokuapp.com/https://muslimsalat.com/${this.state.cityname}/daily.json?key=9ab533462042508648d35fda77c55117`)\n      .then(response => {\n        console.log(response.data.items[0]);\n        console.log(response.data);\n\n\n        let city = response.data.city;\n        let country = response.data.country;\n        let fajr = response.data.items[0].fajr;\n        let dhuhr = response.data.items[0].dhuhr;\n        let asr = response.data.items[0].asr;\n        let maghrib = response.data.items[0].maghrib;\n        let isha = response.data.items[0].isha;\n        let shurooq = response.data.items[0].shurooq;\n        let date = response.data.items[0].date_for;\n        let qibla = response.data.qibla_direction;\n        let latitude = response.data.latitude;\n        let longitude = response.data.longitude;\n        this.setState({\n          fajr: fajr, dhuhr: dhuhr, asr: asr, maghrib: maghrib, isha: isha, shurooq: shurooq,\n          date: date, country: country, city: city, qibla: qibla, latitude: latitude, longitude: longitude\n        })\n\n      })\n  }\n\n\n  render() {\n    return (\n      <div >\n\n\n        <div className=\"prayerTimes\">\n          <h1> Prayer Times </h1>\n          <p>Please enter a city to get it's prayer times</p>\n          <input name=\"cityname\"\n            value={this.state.cityname} onChange={this.changeHandler} />\n\n          <button onClick={this.submitHandler}> Search </button>\n\n          <PrayerTimes prayers={this.state} />\n          <br></br>\n          <img src=\"https://bethanmaybooks.files.wordpress.com/2018/08/pagebreak.png\" width=\"800x700\" />\n          <br></br>\n\n\n          <div>\n            <h1> Qibla Direction</h1>\n\n            <h4>Qibla Diections of {this.state.cityname} </h4>\n            <table width=\"40%\">\n              <tr>\n                <td>Direction </td>\n                <td width=\"60%\">{this.state.qibla} </td>\n              </tr>\n              <tr>\n                <td>Latitude: </td>\n                <td width=\"60%\">{this.state.latitude} </td>\n              </tr>\n              <tr>\n                <td>Longitude: </td>\n                <td width=\"60%\">{this.state.longitude} </td>\n              </tr>\n            </table>\n          </div>\n\n          <br></br> <br></br>\n\n\n          <div className=\"container\">\n            <div className=\"compass\">\n\n              <div className=\"cover\">\n              </div>\n\n              <div className=\"needle\" style={{ transform: `rotate(${Number(this.state.qibla) + 90}deg)` }} >\n\n                <div className=\"main\">\n                </div>\n\n              </div>\n            </div>\n          </div>\n\n\n          <br></br><br></br><br></br>\n          <img src=\"https://bethanmaybooks.files.wordpress.com/2018/08/pagebreak.png\" width=\"800x700\" />\n          <br></br> <br></br>\n\n\n          <h1>Watch Live Video of Makkah, Saudi Arabia </h1>\n          <br></br>\n          {/* youtubelink */}\n          <iframe width=\"860\" height=\"400\" src=\"https://www.youtube.com/embed/7BE8NxMhwas\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n        </div>\n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}